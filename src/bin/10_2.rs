use std::collections::BTreeSet;

enum Direction {
    Up,
    Down,
    Right,
    Left
}

fn main() {
    let lines = INPUT.lines().map(|l| l.chars().map(|c| c.to_digit(10).unwrap() as usize).collect::<Vec<_>>()).collect::<Vec<_>>();
    let X = lines[0].len();
    let Y = lines.len();
    let mut count = 0;
    for y in 0..Y {
        for x in 0..X {
            if lines[y][x] == 0 {
                // let mut reached = BTreeSet::<(usize, usize)>::new();
                let mut path = vec![((x, y), Direction::Up)];
                let mut poped = false;
                while path.len() > 0 {
                    let target = match path.last().unwrap() {
                        ((x, y), Direction::Up) => (*x, y.saturating_sub(1)),
                        ((x, y), Direction::Down) => (*x, (y+1).min(Y-1)),
                        ((x, y), Direction::Right) => ((x+1).min(X-1), *y),
                        ((x, y), Direction::Left) => (x.saturating_sub(1), *y),
                    };
                    if lines[target.1][target.0] == path.len() && !poped {
                        if path.len() == 9 {
                            // reached.insert(target);
                            count += 1;
                        } else {
                            path.push((target, Direction::Up));
                            continue;
                        }
                    }
                    let current = path.pop().unwrap();
                    path.push((current.0, match current.1 {
                        Direction::Up => Direction::Down,
                        Direction::Down => Direction::Right,
                        Direction::Right => Direction::Left,
                        Direction::Left => {
                            poped = true;
                            continue;
                        },
                    }));
                    poped = false;
                }
                // count += reached.len();
            }
        }
    }
    dbg!(count);
}

const TEST_INPUT: &'static str = "89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732";

const INPUT: &'static str = "45678701021256787218432154301232100012334301023456789
32569892430543298909845067210145621965421012310545869
01210743549612187610756778143296534874310123458930978
12323651258703066525643889050387546789210234567821567
01434210367012178434512918761236695694391349650131054
12544303438124569232101109678945784321487658743232343
43695496549433450143001234532034653210156961234589787
94786987834342100154519873541128763165432870234671096
85677889929854343267610565690639454076501210165692345
76012870010767256998701234788748348987432101156787654
01043961171258107887898345659654239858901101089810123
32154552987349016576987454564980108765432232123209874
43960143476987657607876523875676501678921349854112365
54871232564890548510965014934189432578900458963012453
69890121465431239423454876821054329657811467874501412
78781230656322102347623945498765018746324320189432303
45610945567212121098510130340121201235435410234534564
44327876438901010101498321233290345110346761809621875
34387654323432129812367321044789876011289898918760976
45297890012343456703455433445602345895670767823451987
56187781201278914567526932563211056734321296744589854
67096654302107803498017801074787654321234585430076763
78945109213456012332101301985698543210987676121125892
21032238376788768945432452394987650121789678032434981
32561247487699854876983345401276345430678549140123470
23470056794521003123476236982345036781565432101210565
14980129873430412001569107810034129092634307870389874
05691234562541343432018098941125678104321216921010123
06788765101632234589127657832103543219450325432167012
12109453210762103678934566543012354308765014703458983
43898344789899872100129875414983989412894327812565410
56701235692198561091223014305894876543781016945678320
12345106541085432782014323216765321789692345238769801
01416787632176306654105450125601450694547654199654432
12109898501201217653296961234702364543498703080123569
01234549654323898741787870149810676032107012678034078
67899678760015677230765487654321980121978710569985127
58908707871234982101896398923450890120879623450276434
43211216910123878982363210110961051234566542141105589
52890345034987965985476545607872340345651033032234676
01761212125675654876983432787401456978762122345897655
10354305430234503210012301294301967869887831056798587
23487416521105012342121345385210876778896990987123496
96596547012276109653010256106321236569045781234012345
87432108983489298764560187287810345652134650965421004
76545017698548345675078894396923456743221045874540218
89632123087632210982189123405410567892100038973234389
56749834128901043983458016512321098754321122980198476
43898765439456712276567087695632347665430101076567567
32109650169329803125690198787541056578920122345445898
78980543278019874034787239645670567810110233410336765
65211230165216565129876543532789436921898398561221234
34302321254305653210210123401890125432765487652310123";